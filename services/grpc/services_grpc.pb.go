// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: grpc/services.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MicroserviceClient is the client API for Microservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroserviceClient interface {
	Create(ctx context.Context, in *RequestCreate, opts ...grpc.CallOption) (*ReplyCreate, error)
	Get(ctx context.Context, in *RequestGet, opts ...grpc.CallOption) (*ReplyGet, error)
	Update(ctx context.Context, in *RequestUpdate, opts ...grpc.CallOption) (*ReplyUpdate, error)
	Delete(ctx context.Context, in *RequestDelete, opts ...grpc.CallOption) (*ReplyDelete, error)
	ChangeStatus(ctx context.Context, in *RequestChangeStatus, opts ...grpc.CallOption) (*ReplyChangeStatus, error)
	Validate(ctx context.Context, in *RequestValidate, opts ...grpc.CallOption) (*ReplyValidate, error)
	// Sadece test verisini oluşturmayı tetikliyor
	CreateTestData(ctx context.Context, in *RequestTestData, opts ...grpc.CallOption) (*ReplyTestData, error)
	DeleteTestData(ctx context.Context, in *RequestTestData, opts ...grpc.CallOption) (*ReplyTestData, error)
}

type microserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroserviceClient(cc grpc.ClientConnInterface) MicroserviceClient {
	return &microserviceClient{cc}
}

func (c *microserviceClient) Create(ctx context.Context, in *RequestCreate, opts ...grpc.CallOption) (*ReplyCreate, error) {
	out := new(ReplyCreate)
	err := c.cc.Invoke(ctx, "/grpc.Microservice/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) Get(ctx context.Context, in *RequestGet, opts ...grpc.CallOption) (*ReplyGet, error) {
	out := new(ReplyGet)
	err := c.cc.Invoke(ctx, "/grpc.Microservice/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) Update(ctx context.Context, in *RequestUpdate, opts ...grpc.CallOption) (*ReplyUpdate, error) {
	out := new(ReplyUpdate)
	err := c.cc.Invoke(ctx, "/grpc.Microservice/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) Delete(ctx context.Context, in *RequestDelete, opts ...grpc.CallOption) (*ReplyDelete, error) {
	out := new(ReplyDelete)
	err := c.cc.Invoke(ctx, "/grpc.Microservice/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) ChangeStatus(ctx context.Context, in *RequestChangeStatus, opts ...grpc.CallOption) (*ReplyChangeStatus, error) {
	out := new(ReplyChangeStatus)
	err := c.cc.Invoke(ctx, "/grpc.Microservice/ChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) Validate(ctx context.Context, in *RequestValidate, opts ...grpc.CallOption) (*ReplyValidate, error) {
	out := new(ReplyValidate)
	err := c.cc.Invoke(ctx, "/grpc.Microservice/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) CreateTestData(ctx context.Context, in *RequestTestData, opts ...grpc.CallOption) (*ReplyTestData, error) {
	out := new(ReplyTestData)
	err := c.cc.Invoke(ctx, "/grpc.Microservice/CreateTestData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) DeleteTestData(ctx context.Context, in *RequestTestData, opts ...grpc.CallOption) (*ReplyTestData, error) {
	out := new(ReplyTestData)
	err := c.cc.Invoke(ctx, "/grpc.Microservice/DeleteTestData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroserviceServer is the server API for Microservice service.
// All implementations must embed UnimplementedMicroserviceServer
// for forward compatibility
type MicroserviceServer interface {
	Create(context.Context, *RequestCreate) (*ReplyCreate, error)
	Get(context.Context, *RequestGet) (*ReplyGet, error)
	Update(context.Context, *RequestUpdate) (*ReplyUpdate, error)
	Delete(context.Context, *RequestDelete) (*ReplyDelete, error)
	ChangeStatus(context.Context, *RequestChangeStatus) (*ReplyChangeStatus, error)
	Validate(context.Context, *RequestValidate) (*ReplyValidate, error)
	// Sadece test verisini oluşturmayı tetikliyor
	CreateTestData(context.Context, *RequestTestData) (*ReplyTestData, error)
	DeleteTestData(context.Context, *RequestTestData) (*ReplyTestData, error)
	mustEmbedUnimplementedMicroserviceServer()
}

// UnimplementedMicroserviceServer must be embedded to have forward compatible implementations.
type UnimplementedMicroserviceServer struct {
}

func (UnimplementedMicroserviceServer) Create(context.Context, *RequestCreate) (*ReplyCreate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMicroserviceServer) Get(context.Context, *RequestGet) (*ReplyGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMicroserviceServer) Update(context.Context, *RequestUpdate) (*ReplyUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMicroserviceServer) Delete(context.Context, *RequestDelete) (*ReplyDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMicroserviceServer) ChangeStatus(context.Context, *RequestChangeStatus) (*ReplyChangeStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}
func (UnimplementedMicroserviceServer) Validate(context.Context, *RequestValidate) (*ReplyValidate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedMicroserviceServer) CreateTestData(context.Context, *RequestTestData) (*ReplyTestData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestData not implemented")
}
func (UnimplementedMicroserviceServer) DeleteTestData(context.Context, *RequestTestData) (*ReplyTestData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestData not implemented")
}
func (UnimplementedMicroserviceServer) mustEmbedUnimplementedMicroserviceServer() {}

// UnsafeMicroserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroserviceServer will
// result in compilation errors.
type UnsafeMicroserviceServer interface {
	mustEmbedUnimplementedMicroserviceServer()
}

func RegisterMicroserviceServer(s grpc.ServiceRegistrar, srv MicroserviceServer) {
	s.RegisterService(&Microservice_ServiceDesc, srv)
}

func _Microservice_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Microservice/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).Create(ctx, req.(*RequestCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Microservice/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).Get(ctx, req.(*RequestGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Microservice/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).Update(ctx, req.(*RequestUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Microservice/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).Delete(ctx, req.(*RequestDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChangeStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Microservice/ChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).ChangeStatus(ctx, req.(*RequestChangeStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestValidate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Microservice/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).Validate(ctx, req.(*RequestValidate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_CreateTestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).CreateTestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Microservice/CreateTestData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).CreateTestData(ctx, req.(*RequestTestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_DeleteTestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).DeleteTestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Microservice/DeleteTestData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).DeleteTestData(ctx, req.(*RequestTestData))
	}
	return interceptor(ctx, in, info, handler)
}

// Microservice_ServiceDesc is the grpc.ServiceDesc for Microservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Microservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Microservice",
	HandlerType: (*MicroserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Microservice_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Microservice_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Microservice_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Microservice_Delete_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _Microservice_ChangeStatus_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Microservice_Validate_Handler,
		},
		{
			MethodName: "CreateTestData",
			Handler:    _Microservice_CreateTestData_Handler,
		},
		{
			MethodName: "DeleteTestData",
			Handler:    _Microservice_DeleteTestData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/services.proto",
}
